AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template based on a great AWS example originally @ https://s3-us-west-2.amazonaws.com/cloudformation-templates-us-west-2/AutoScalingMultiAZWithNotifications.template.

  The template will create a general purpose autoscaling group with a single instance.

  Helpful Resources:
    https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-install.html

    **WARNING** This template creates one or more Amazon EC2 instances
  and an Application Load Balancer. You will be billed for the AWS resources
  used if you create a stack from this template.
Parameters:
  clusterName:
    Description: Name of the ECS Cluster this instance should be part of 
    Type: String
    Default: GeneralPurposeCluster
  imageId:
    Description: imageId
    Type: String
    Default: ami-02ccb28830b645a41
  instanceType:
    Description: instanceType
    Type: String
    Default: t2.small
    AllowedValues:
     - t2.micro
     - t1.micro
     - t2.small
     - m1.small
     - m1.medium
    ConstraintDescription: must be a valid EC2 instance type.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    ConstraintDescription: >-
      must be a list of at least two existing subnets associated with at least
      two different availability zones. They should be residing in the selected
      Virtual Private Cloud.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  cloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      RetentionInDays: 7
  instanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iam:GetGroup
            - iam:ListUsers
            - iam:GetSSHPublicKey
            - iam:ListSSHPublicKeys
            - ec2:DescribeTags
            Effect: Allow
            Resource: '*'
        PolicyName: allowImportUsersForSSH
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:UpdateContainerInstancesState
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: ecsUpdateContainerInstancesStatePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: cloudWatchLogsPolicy
  instanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn:
    - instanceRole
    Properties:
      Path: /
      Roles:
      - Ref: instanceRole
  websiteLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn:
      - ECSCluster
      - instanceProfile
    Properties:
      LaunchTemplateName: !Sub LaunchTemplateFor-${AWS::StackName}
      LaunchTemplateData: 
        InstanceType: !Ref instanceType
        KeyName: !Ref KeyName
        CreditSpecification:
          CpuCredits: standard
        ImageId: !Ref imageId
        IamInstanceProfile:
          Arn: !GetAtt instanceProfile.Arn
        InstanceMarketOptions:
            MarketType: spot
            SpotOptions:
              InstanceInterruptionBehavior: terminate
              MaxPrice: 0.01
              SpotInstanceType: one-time
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
          - !ImportValue serverless-mysql-DBClientSG
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              -
                Key: Name
                Value: !Sub AutoScaled-${AWS::StackName}
        UserData:
          Fn::Base64: !Sub |
            #cloud-config
            repo_update: true
            repo_upgrade: all

            packages:
            - emacs
            - htop
            - libssl-dev
            - htop
            - git
            - lynx
            - htop
            - ntp
            - scrub
            - mysql

            write_files:
            -   content: |
                   #/bin/sh
                   docker pull amazon/amazon-ecs-agent:latest

                   systemctl restart ecs
                path: /etc/cron.hourly/ecs-update
                owner: root:root
                permissions: '0744'
            -   content: |
                   # See https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-agent-config.hl
                   ECS_CLUSTER=${clusterName}
                   ECS_LOGLEVEL=info
                   ECS_UPDATES_ENABLED=true
                path: /etc/ecs/ecs.config
                owner: root:root
                permissions: '0644'
            -   content: |
                   {
                      "agent": {
                        "debug": true,
                        "metrics_collection_interval": 60,
                        "region": "${AWS::Region}"
                      },
                      "logs": {
                        "logs_collected": {
                          "files": {
                            "collect_list": [
                              {
                                "file_path": "/var/log/messages",
                                "log_group_name": "${cloudWatchLogsGroup}",
                                "log_stream_name": "{instance_id}/messages",
                                "timestamp_format": "%b  %d %H:%M:%S"
                              },
                              {
                                "file_path": "/var/log/ecs/ecs-agent.log",
                                "log_group_name": "${cloudWatchLogsGroup}",
                                "log_stream_name": "{instance_id}/ecs-agent.log",
                                "timestamp_format": "%b %d %H:%M:%S"
                              },
                              {
                                "file_path": "/var/log/cloud-init-output.log",
                                "log_group_name": "${cloudWatchLogsGroup}",
                                "log_stream_name": "{instance_id}/cloud-init-output.log"
                              }
                            ]
                          }
                        }
                      },
                      "metrics": {
                        "append_dimensions": {
                          "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                          "ImageId": "${!aws:ImageId}",
                          "InstanceId": "${!aws:InstanceId}",
                          "InstanceType": "${!aws:InstanceType}"
                        },
                        "metrics_collected": {
                          "mem": {
                            "measurement": [
                              "mem_used_percent"
                            ]
                          },
                          "cpu": {
                            "resources": [
                              "*"
                            ],
                            "measurement": [
                              {"name": "cpu_usage_idle", "rename": "CPU_USAGE_IDLE", "unit": "Percent"},
                              {"name": "cpu_usage_nice", "unit": "Percent"},
                              "cpu_usage_guest"
                            ],
                            "totalcpu": true,
                            "metrics_collection_interval": 60,
                            "append_dimensions": {
                              "customized_dimension_key_1": "customized_dimension_value_1",
                              "customized_dimension_key_2": "customized_dimension_value_2"
                            }
                          },
                          "swap": {
                            "measurement": [
                              "swap_used_percent"
                            ]
                          },
                          "net": {
                            "resources": [
                              "eth0",
                              "docker0"
                            ],
                            "measurement": [
                              "bytes_sent",
                              "bytes_recv"
                            ]
                          },
                          "netstat": {
                            "measurement": [
                              "tcp_established",
                              "tcp_syn_sent",
                              "tcp_close"
                            ],
                            "metrics_collection_interval": 60
                          },
                          "processes": {
                            "measurement": [
                              "running",
                              "sleeping",
                              "dead"
                            ]
                          }
                        }
                      }
                   }
                path: /var/local/amazon-cloudwatch-agent.json
                owner: root:root
                permissions: '0644'

            runcmd:
            - /opt/aws/bin/cfn-init --stack=${AWS::StackName} --region=${AWS::Region} --verbose
            - rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            - yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            - /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/var/local/amazon-cloudwatch-agent.json -s
            - amazon-linux-extras disable docker
            - amazon-linux-extras install -y ecs
            - usermod -a -G docker ec2-user
            - systemctl enable --now --no-block ecs
            - curl -sL https://rpm.nodesource.com/setup_12.x | sudo bash -
            - curl -s https://bootstrap.pypa.io/get-pip.py | python
            - pip install --upgrade pip awscli virtualenv virtualenvwrapper
            - curl -s https://raw.githubusercontent.com/bmschwa/aws-ec2-ssh/3771fe6ba4c5738e1d6a6b84dd282a303cfde838/install.sh --output /tmp/install_aws_ec2_ssh.sh
            - chmod 755 /tmp/install_aws_ec2_ssh.sh && sudo -H /tmp/install_aws_ec2_ssh.sh -i linux-users -l docker -s super-linux-users
            - /opt/aws/bin/cfn-signal --success true --stack ${AWS::StackName} --region ${AWS::Region} --resource WebServerGroup
            - service ntpd start && chkconfig ntpd on && chkconfig docker on && chkconfig amazon-cloudwatch-agent on
            - yum groupinstall "Development Tools"
            - yum -y --security update

  NotificationTopic:
    Type: 'AWS::SNS::Topic'
  WebServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
      - websiteLaunchTemplate
    Properties:
      VPCZoneIdentifier: !Ref Subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref websiteLaunchTemplate
        Version: !GetAtt websiteLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '3'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      NotificationConfiguration:
        TopicARN: !Ref NotificationTopic
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH'
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebServerGroup
      ComparisonOperator: LessThanThreshold
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VpcId
  TCPToSpotsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DeletionPolicy: Retain
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Load Balancers, and anything else wanting to route to spot instances should add this security group
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8999
          Description: Application ports that should be running in docker
          SourceSecurityGroupId: !Ref TCPToSpotsSecurityGroup
      VpcId: !Ref VpcId
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref clusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
Outputs: 
    TCPToSpotsSecurityGroup:
      Description: Security Group to be used by load balancers
      Value: !Ref TCPToSpotsSecurityGroup
      Export:
        Name: AllTCPToGeneralPurposeSecurityGroup
      
    ALBGroupName:
      Description: Auto scaling group created from this Stack
      Value: !Ref WebServerGroup
      Export:
        Name: GeneralPurposeAutoScalingGroup
    ALBUpDownNotificationARN:
      Description: Autoscaling Notification Topic
      Value: !Ref NotificationTopic
    ClusterArn:
      Description: ARN of the cluster into which we will put our tasks
      Value: !Ref ECSCluster
      Export:
        Name: GeneralPurposeECSCluster
